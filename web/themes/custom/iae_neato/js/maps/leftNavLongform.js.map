{"version":3,"sources":["leftNavLongform.js"],"names":["$","Drupal","leftNavLongFormC","openNav","$leftNavOpen","addClass","leftNavIsOpen","$leftNavMenu","find","focus","closeNav","removeClass","init","context","selectMenuItem","id","leftNavActive","i","$leftNavItems","length","$item","href","attr","setSidebarContainerDims","$sidebarContainer","height","$sidebar","outerHeight","setCurrentLocation","scrollTop","window","offset","top","topTrigger","offsetTop","offsetHeight","bottomSpacing","$footer","s","sb","$sections","section","topSpacing","text","innerText","scrollToSection","target","newTop","isMobile","$topbar","$toolbar","hasClass","hash","distance","Math","abs","scrollTime","maxScrollTime","animate","duration","easing","on","namespace","e","preventDefault","addEventListener","scroll","click","keyCode","$firstMenuItem","first","behaviors","leftNavLongForm","attach","settings","once","each","this","jQuery"],"mappings":"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","file":"../leftNavLongform.js","sourcesContent":["/**\n * @file\n * Juilliard - Left Nav LongForm Behaviors\n *\n * @type {{attach: Drupal.behaviors.leftNavLongForm.attach}}\n */\n\n(function ($) {\n  'use strict';\n\n  // Wrap code in a function to make variables local.\n  Drupal.leftNavLongFormC = function () {\n    var namespace = 'leftNavLongForm';\n    var leftNavIsOpen = 'leftnav-is-open';\n    var leftNavActive = 'leftnav-active';\n\n    var $leftNavOpen;\n    var $leftNavMenu;\n    var $leftNavItems;\n    var $toolbar;\n    var $topbar;\n    var $sidebar;\n    var $sidebarContainer;\n    var $sections;\n    var $footer;\n\n    var topTrigger;\n    var topSpacing;\n    var bottomSpacing;\n    var maxScrollTime = 1000;\n\n    var isMobile;\n\n    // Open the Navigation menu - only done in mobile.\n    function openNav() {\n      $leftNavOpen.addClass(leftNavIsOpen);\n      $leftNavMenu.addClass(leftNavIsOpen);\n      $leftNavMenu.find('li:eq(0) a').focus();\n    }\n\n    // Close the navigation menu\n    function closeNav() {\n      $leftNavOpen.removeClass(leftNavIsOpen);\n      $leftNavMenu.removeClass(leftNavIsOpen);\n    }\n\n    // Initialize the Navigation behaviors\n    function init(context) {\n      $toolbar = $('#toolbar-bar');\n      $topbar = $('#top-bar');\n      $footer = $('.layout-container > footer');\n      $sidebarContainer = $(context).find('#content-sidebar-container');\n      $sidebar = $(context).find('.content-sidebar');\n      $leftNavOpen = $(context).find('.leftnav-open');\n      $leftNavMenu = $(context).find('.leftnav-menu');\n      $leftNavItems = $leftNavMenu.find('li');\n      $sections = $(context).find('.leftnav-section');\n\n      // Desktop mediaquery event listener - Open nav menu (always open on desktop).\n      $(window).on('desktop.' + namespace, function (e) {\n        openNav(e);\n      });\n\n      // Mobile mediaquery event listener - Initially close the nav menu.\n      $(window).on('mobile.' + namespace, function (e) {\n        closeNav(e);\n      });\n\n      // Nav menu open button event listener - User selects \"Jump to a Section\" button.\n      $leftNavOpen.on('click', function (e) {\n        e.preventDefault();\n        if ($leftNavMenu.hasClass(leftNavIsOpen)) {\n          closeNav(e);\n        }\n        else {\n          openNav(e);\n        }\n      });\n\n      // Search for a nav menu item with a href of: '#' + id\n      function selectMenuItem(id) {\n        $leftNavMenu.find('li').removeClass(leftNavActive);\n        for (var i = 0; i < $leftNavItems.length; i++) {\n          var $item = $($leftNavItems[i]);\n          var href = $item.find('a').attr('href');\n          if (href === '#' + id) {\n            $item.addClass(leftNavActive);\n            break;\n          }\n        }\n      }\n\n      // Set the height of the sidebar container = to height of sidebar container contents.\n      // Holds space when sidebar contents become fixed.\n      function setSidebarContainerDims() {\n        $sidebarContainer.height($sidebar.outerHeight());\n      }\n\n      // Listen for window resize events.\n      window.addEventListener('resize', function () {\n        setSidebarContainerDims();\n      });\n\n      // Mobile mode.\n      $(window).on('mobile.' + namespace, function () {\n        isMobile = true;\n        topSpacing = $topbar.height() + $leftNavOpen.outerHeight() + 10;\n        topTrigger = $topbar.height();\n        setCurrentLocation();\n      });\n\n      // Desktop mode.\n      $(window).on('desktop.' + namespace, function (context) {\n        isMobile = false;\n        topTrigger = $topbar.height() + 75;\n        topSpacing = $topbar.height() + 75;\n        bottomSpacing = 50;\n        setCurrentLocation();\n      });\n\n      // Listen for scroll events.\n      $(window).scroll(function () {\n        setCurrentLocation();\n      });\n\n      // From current location fix/unfix sidebar nav, indicate current section.\n      function setCurrentLocation() {\n        var scrollTop = $(window).scrollTop();\n\n        // Fix the sidebar to the top when scrolling.\n        if (scrollTop >= $sidebarContainer.offset().top - topTrigger) {\n          $sidebar.addClass('content-sidebar-fixed');\n        }\n        else {\n          $sidebar.removeClass('content-sidebar-fixed');\n        }\n\n        // Look for when the bottom of the .content-container is within bottomSpacing of the bottom of the nav sidebar.\n        if (scrollTop + $sidebar[0].offsetTop + $sidebar[0].offsetHeight + bottomSpacing >= $footer[0].offsetTop) {\n          $sidebar.addClass('content-sidebar-bottom');\n        }\n        else {\n          $sidebar.removeClass('content-sidebar-bottom');\n        }\n\n        // Find menu item currently displayed in viewport.\n        var s;\n        var sb;\n        for (s = 0; s < $sections.length; s++) {\n          var section = $sections[s];\n          sb = $sections.length - 1;\n          if (scrollTop < section.offsetTop - topSpacing - 10) {\n            sb = (s === 0) ? 0 : s - 1;\n            break;\n          }\n        }\n        // Set text in Open button to currently displayed menu item.\n        if (s !== 0) {\n          var i = (sb > $leftNavItems.length - 1) ? $leftNavItems.length - 1 : sb;\n          $leftNavOpen.text($leftNavItems[i].innerText);\n        }\n        // Set class on menu item for currently displayed section.\n        selectMenuItem($sections[sb].id);\n      }\n\n      function scrollToSection(target) {\n        var newTop;\n        if (isMobile) {\n          var offset = 10 + $leftNavOpen.outerHeight(true) + $topbar.outerHeight(true);\n          if ($toolbar && $('body').hasClass('toolbar-fixed')) {\n            offset += $toolbar.height();\n          }\n          newTop = $(target.hash).offset().top - offset;\n        }\n        else {\n          newTop = $(target.hash).offset().top - 165;\n        }\n        var distance = Math.abs(newTop - $(window).scrollTop());\n        var scrollTime = (distance < maxScrollTime) ? distance : maxScrollTime;\n\n        $('html, body').animate({scrollTop: newTop + 'px'}, {duration: scrollTime, easing: 'swing'});\n      }\n\n      // Event - User clicks on nav item - scroll to selected section and close nav menu.\n      $leftNavMenu.find('a').click(function (e) {\n        e.preventDefault();\n        scrollToSection(e.target);\n\n        if (isMobile) {\n          closeNav();\n        }\n      }).on('keydown', function (e) { // User presses ENTER button\n        if (e.keyCode === 13) {\n          e.preventDefault();\n          scrollToSection(e.target);\n          $(e.target.hash).find('.back-to-menu-anchor').focus();\n\n          if (isMobile) {\n            closeNav();\n          }\n        }\n      });\n\n      setSidebarContainerDims();\n\n      // Initially select the first nav menu item and its related content section.\n      var $firstMenuItem = $leftNavMenu.find('li').first();\n      $firstMenuItem.addClass(leftNavActive);\n      $sections.first().addClass(leftNavActive);\n\n      // focus first menu item on \"back to menu\" link (assessibility/desktop)\n      $('.back-to-menu-anchor').on('keydown', function (e) {\n        if (e.keyCode === 13) {\n          e.preventDefault();\n          $firstMenuItem.find('a').focus();\n        }\n      });\n    }\n\n    return {\n      init: init\n    };\n  }; // function Drupal.leftNavLongFormC - function wrapper to make variables local.\n\n  Drupal.behaviors.leftNavLongForm = {\n    attach: function (context, settings) {\n      $(context).find('.left-nav-longform, .application-requirements').once('leftNavLongForm').each(function () {\n        if (!Drupal.leftNavLongForm) {\n          Drupal.leftNavLongForm = Drupal.leftNavLongFormC();\n        }\n        Drupal.leftNavLongForm.init(this);\n      });\n    }\n  };\n\n}(jQuery));\n\n"]}