<?php

/**
 * @file
 * This file contains the hooks for Footmotes module.
 *
 * The Footnotes module is a filter that can be used to insert
 * automatically numbered az_wysiwyg into Drupal texts.
 */

use Drupal\az_wysiwyg\WysiwygBase;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;

/**
 * Implements hook_help().
 */
function az_wysiwyg_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.az_wysiwyg':
      return
        t('Insert automatically numbered az_wysiwyg using &lt;fn&gt; or [fn] tags. Enable the az_wysiwyg text filter @here',
          array('@here' => Drupal::l(t('here'), Url::fromRoute('filter.admin_overview')))
        );
  }
}

/**
 * Implements hook_theme().
 *
 * Thanks to emfabric for this implementation. http://drupal.org/node/221156
 */
function az_wysiwyg_theme() {
  return array(
    'az_tooltip' => [
      'variables' => ['word' => NULL, 'tip' => NULL],
    ],
    'az_tooltip_link' => [
      'variables' => ['word' => NULL, 'tip' => NULL, 'tipurl' => NULL],
    ],
    'az_footnote_link' => [
      'render element' => 'fn',
      'function' => 'az_wysiwyg_theme_footnote_link',
    ],
    'az_footnote_list' => [
      'render element' => 'az_footnotes',
      'function' => 'az_wysiwyg_theme_footnote_list',
    ],
  );
}

/**
 * Themed output of a footnote link appearing in the text body.
 *
 * Accepts a single associative array, containing values on the following keys:
 *   text       - the raw unprocessed text extracted from within the [fn] tag
 *   text_clean - a sanitized version of the previous, may be used as HTML
 *                attribute value
 *   value      - the raw unprocessed footnote number or other identifying label
 *   fn_id      - the globally unique identifier for the in-body footnote link
 *                anchor, used to allow links from the list to the body.
 *   ref_id     - the globally unique identifier for the footnote's anchor in
 *                the footnote listing, used to allow links to the list from the
 *                body.
 */
function az_wysiwyg_theme_footnote_link($fn) {
  // Drupal 8 needs the use of render arrays, the array como as this ugly,
  // maybe latter fix this, but for now it works.
  // @todo: change this ugly array for arguments in the function.
  $fn = $fn['fn']['fn'];
  return '<a class="see-footnote" id="' . $fn['ref_id'] .  '" title="' . $fn['text_clean'] . '" href="#' . $fn['fn_id'] . '">&#91;' .
         $fn['value'] . '&#93;</a>';
}

/**
 * Themed output of the az_wysiwyg list appearing at at [az_wysiwyg].
 *
 * Accepts an array containing an ordered listing of associative arrays, each
 * containing values on the following keys:
 *   text   - the raw unprocessed text extracted from within the [fn] tag
 *   text_clean   - a sanitized version of the previous, may be used as HTML
 *                  attribute value
 *   value  - the raw unprocessed footnote number or other identifying label
 *   fn_id  - the globally unique identifier for the in-body footnote link
 *            anchor, used to allow links from the list to the body
 *   ref_id - the globally unique identifier for the footnote's anchor in the
 *            footnote listing, used to allow links to the list from the body.
 */
function az_wysiwyg_theme_footnote_list($footnotes) {
  // Drupal 8 needs the use of render arrays, the array as this ugly,
  // maybe latter fix this, but for now it works.
  // @todo: change this ugly array for arguments in the function.
  $footnotes = $footnotes['az_footnotes']['#footnotes'];
  $str = '<ul class="footnotes">';
  // Drupal 7 requires we use "render element" which just introduces a wrapper
  // around the old array.
  // $footnotes = $footnotes['footnotes'];
  // loop through the footnotes.
  foreach ($footnotes as $fn) {
    if (!is_array($fn['ref_id'])) {
      // Output normal footnote.
      $str .= '<li class="footnote" id="' . $fn['fn_id'] . '"><a class="footnote-label" href="#' . $fn['ref_id'] . '">' . $fn['value'] . '.</a> ';
      $str .= $fn['text'] . "</li>\n";
    }
    else {
      // Output footnote that has more than one reference to it in the body.
      // The only difference is to insert backlinks to all references.
      // Helper: we need to enumerate a, b, c...
      $abc = str_split("abcdefghijklmnopqrstuvwxyz"); $i = 0;

      $str .= '<li class="footnote" id="' . $fn['fn_id'] . '"><a href="#' . $fn['ref_id'][0] . '" class="footnote-label">' . $fn['value'] . '.</a> ';
      foreach ($fn['ref_id'] as $ref) {
        $str .= '<a class="footnote-multi" href="#' . $ref . '">' . $abc[$i] . '.</a> ';
        $i++;
      }
      $str .= $fn['text'] . "</li>\n";
    }
  }
  $str .= "</ul>\n";
  return $str;
}

/**
 * Helper for other filters, check if Footnotes is present in your filter chain.
 *
 * Note: Due to changes in Filter API, the arguments to this function have
 * changed in Drupal 7.
 *
 * Other filters may leverage the Footnotes functionality in a simple way:
 * by outputting markup with <fn>...</fn> tags within.
 *
 * This creates a dependency, the Footnotes filter must be present later in
 * "Input format". By calling this helper function the other filters that
 * depend on Footnotes may check whether Footnotes is present later in the chain
 * of filters in the current Input format.
 *
 * If this function returns true, the caller may depend on Footnotes. Function
 * returns false if caller may not depend on Footnotes.
 *
 * You should also put "dependencies = az_wysiwyg" in your module.info file.
 *
 * Example usage:
 * <code>
 * _filter_example_process( $text, $filter, $format ) {
 *   ...
 *   if(footnotes_is_footnotes_later($format, $filter)) {
 *     //output markup which may include [fn] tags
 *   }
 *   else {
 *     // must make do without footnotes features
 *     // can also emit warning/error that user should install and configure
 *     // footnotes module
 *   }
 *   ...
 * }
 * </code>
 *
 * @param object $format
 *    The text format object caller is part of.
 * @param object $caller_filter
 *    The filter object representing the caller (in this text format).
 *
 * @return True
 *    If Footnotes is present after $caller in $format.
 */
function az_wysiwyg_is_az_wysiwyg_later($format, $caller_filter) {
  return $format['filter_az_wysiwyg']['weight'] > $caller_filter['weight'];
}

/**
 * Implements HOOK_node_presave().
 *
 * - Extract glossary terms from text and add to node.
 *
 * @param \Drupal\Core\Entity\EntityInterface $node
 */
function az_wysiwyg_node_presave(EntityInterface $node) {
  $type = $node->getType();
  $glossary = [];
  if ($type == 'article' || $type == 'book' || $type == 'glossary') {
    $glossary = WysiwygBase::loadGlossary();
    WysiwygBase::extractTerms($node->body->value, $glossary);
  }
  WysiwygBase::addTopicsToNode($node, $glossary);
}

